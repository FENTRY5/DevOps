Question 1
An engineer plans to override the instance type from t2.micro to t2.small.

resource "aws_instance" "web_server" {
  ami = "ami-09e67e426f25ce0d7"
  instance_type = "t2.small"
}
Will this accomplish the task?

False

True

SELECTED

Yes, this will accomplish the task because only the variable is being changed from "t2.micro" to "t2.small". After performing terraform plan or terraform apply, the state file should update and the configuration should reflect the real world infrastructure changes.

https://www.terraform.io/docs/language/values/variables.html

https://www.terraform.io/docs/language/modules/syntax.html#calling-a-child-module
===========

Question 2
What terraform command will offer to migrate the previous state to a new Terraform Cloud workspace?

terraform validate

The terraform validate command validates the configuration files in a directory, referring only to the configuration and not accessing any remote services such as remote state, provider APIs, etc.

terraform import

Terraform is able to import existing infrastructure. This allows you take resources you've created by some other means and bring it under Terraform management.

terraform fmt

The terraform fmt command is used to rewrite Terraform configuration files to a canonical format and style.

terraform init

SELECTED
Run terraform init

The init command will offer to migrate the previous state to a new Terraform Cloud workspace.

Run terraform init to Migrate the Workspace

=============

Question 3
What terraform command assists in detecting and managing drift?

terraform plan

The plan command and reconciling desired configuration with real-world state.

terraform state

The state file and how Terraform tracks resources.

terraform validate

The terraform validate command validates the configuration files in a directory, referring only to the configuration and not accessing any remote services such as remote state, provider APIs, etc.

https://www.terraform.io/docs/cli/commands/validate.html

terraform refresh

SELECTED
The refresh command and reconciling real-world drift.

Detecting and Managing Drift with Terraform

The equivalent of the command is terraform apply -refresh-only -auto-approve

However, in the exam, they will still ask you both the deprecated version and current versions.

==============


Question 4
A company has three different environments named Dev, Test, and Production. They are tasked to use the same configuration across all environments with different state files.

How can this be done effectively using Terraform's local backend?

Create three remote repositories with the same configuration file in each one.

Create three remote repositories with the same configuration file in each one is not ideal.

Create a separate folder for each location and use the same configuration

Create a separate folder for each location and use the same configuration is not ideal.

Use multiple providers with different regions using alias

We can use for example multiple AWS providers with different regions, for this we need to create an alias and on the resource creation we need to specified the provider. Use multiple providers with different regions using alias does not solve the problem as we are working the same configuration across all environments with different state files.

Apply the concept of terraform workspaces to achieve this

SELECTED
Certain backends support multiple named workspaces, allowing multiple states to be associated with a single configuration. The configuration still has only one backend, but multiple distinct instances of that configuration to be deployed without configuring a new backend or changing authentication credentials.

A common use for multiple workspaces is to create a parallel, distinct copy of a set of infrastructure in order to test a set of changes before modifying the main production infrastructure. For example, a developer working on a complex set of infrastructure changes might create a new temporary workspace in order to freely experiment with changes without affecting the default workspace.

When Terraform is used to manage larger systems, teams should use multiple separate Terraform configurations that correspond with suitable architectural boundaries within the system so that different components can be managed separately and, if appropriate, by distinct teams.

https://www.terraform.io/docs/language/state/workspaces.html
===========

Question 5
State locking does not occur automatically and must be specified during a run.

Is this statement true?

True

False*

SELECTED
State locking happens automatically on all operations that could write state. You won't see any message that it is happening. If state locking fails, Terraform will not continue. You can disable state locking for most commands with the -lock flag but it is not recommended.

https://www.terraform.io/docs/language/state/locking.html

=============

Question 6
What can you do with Terraform Cloud Run Triggers?

Run Triggers allow you to set up notification alerts on different parts of the terraform apply lifecycle.

Made this up.

Run Triggers allow you to run arbitrary code after a terraform apply

There are triggers within Terraform for null_resources and this better describes those kind of triggers.

Run Triggers are used to set billing thresholds for the number of deploys performed.

Terraform Cloud is billed monthly, its not an on-demand service

Run Triggers allows you create a chain of workspaces that trigger one after another*

Terraform Cloud provides a way to connect your workspace to one or more workspaces within your organization, known as "source workspaces". 

These connections called run triggers, allow runs to queue automatically in your workspace on successful apply of runs in any of the source workspaces. You can connect each workspace to up to 20 source workspaces.


============


Question 7
Which are the supported connection types in remote-exec? (Choose 2)

rdp


remote-exec provisioner does not support the rdp connection type

winrm*

The remote-exec provisioner supports both ssh and winrm type connections.

https://www.terraform.io/docs/language/resources/provisioners/remote-exec.html

smb

remote-exec provisioner does not support smb connection type

ssh

SELECTED
The remote-exec provisioner supports both ssh and winrm type connections.

https://www.terraform.io/docs/language/resources/provisioners/remote-exec.html

=========
Question 8
The terraform destroy command's behaviour can be previewed at any time using the terraform plan -destroy command.

Is this statement true?

False

True*

SELECTED
Destroy mode: creates a plan whose goal is to destroy all remote objects that currently exist, leaving an empty Terraform state. This can be useful for situations like transient development environments, where the managed objects cease to be useful once the development task is complete.

Activate destroy mode using the -destroy command line option.

https://www.terraform.io/docs/cli/commands/plan.html#planning-modes
=========

Question 9
Which of the following is true regarding data sources? (Choose 3)

Data sources are only given by providers

This is not true because data sources can be provided by anyone. You can also have your own source

Data block allows the use of filters

SELECTED
We can use filters inside a data block. For example

data "aws_ami" "web" {
  filter {
    name   = "state"
    values = ["available"]
  }
Data sources can use the information provided by another configuration

SELECTED
Data sources allow a terraform configuration to make use of information defined by another separate Terraform configuration

Data sources allow Terraform use information defined outside of Terraform, defined by another separate Terraform configuration, or modified by functions.

A data block can have local sources

SELECTED
data block can have local sources

Each provider may offer data sources alongside its set of resource types.

While many data sources correspond to an infrastructure object type that is accessed via a remote network API, some specialized data sources operate only within Terraform itself, calculating some results and exposing them for use elsewhere.

https://www.terraform.io/docs/language/data-sources/index.html#local-only-data-sources

None of the options
=======================

Question 10
A cloud developer has provisioned their infrastructure in the backend and is planning to make changes to it. Their colleague suggested it is not required to add all the configurations because they can be omitted from the configuration.

What is this type of configuration called?

Remote configuration

The remote backend stores Terraform state and may be used to run operations in Terraform Cloud.

When using full remote operations, operations like terraform plan or terraform apply can be executed in Terraform Cloud's run environment, with log output streaming to the local terminal.

https://www.terraform.io/docs/language/settings/backends/remote.html

Air gapped environment

Air gapped environments are networks that are isolated from other networks, usually both physically and logically. That means no internet. No outside connectivity.

https://www.hashicorp.com/blog/deploying-terraform-enterprise-in-airgapped-environments

Changing configuration

You can change your backend configuration at any time. You can change both the configuration itself as well as the type of backend (for example from "consul" to "s3"). Terraform will automatically detect any changes in your configuration and request a reinitialization.

https://www.terraform.io/docs/language/settings/backends/configuration.html#changing-configuration

Partial configuration

SELECTED
You do not need to specify every required argument in the backend configuration. Omitting certain arguments may be desirable if some arguments are provided automatically by an automation script running Terraform. When some or all of the arguments are omitted, we call this a partial configuration.

https://www.terraform.io/docs/language/settings/backends/configuration.html#partial-configuration

============

Question 11
terraform __________ command is used to rewrite Terraform configuration files to a canonical format and style.

format

now such command

validate

The terraform validate command validates the configuration files in a directory, referring only to the configuration and not accessing any remote services such as remote state, provider APIs, etc.

https://www.terraform.io/docs/cli/commands/validate.html

pretty

no such command

fmt

SELECTED
The terraform fmt command is used to rewrite Terraform configuration files to a canonical format and style. This command applies a subset of the Terraform language style conventions, along with other minor adjustments for readability.

https://www.terraform.io/docs/cli/commands/fmt.html

===========

Question 12
To change the current terraform workspace, you need to use the CLI command terraform workspace _______

list

show

change

select*

SELECTED
The terraform workspace select command is used to choose a different workspace to use for further operations.

Usage: terraform workspace select NAME [DIR]

This command will select another workspace. The named workspace must already exist.

$ terraform workspace list
  default
* development
  jsmith-test

$ terraform workspace select default
Switched to workspace "default".
======


Running terraform plan -destroy will destroy your infrastructure but unlike terraform destroy it will first prompt you to confirm. terraform plan -destroy and terraform apply -destroy are the same command.

True

False*

You can also create a speculative destroy plan, to see what the effect of destroying would be, by running the following command:

terraform plan -destroy
https://www.terraform.io/docs/cli/commands/destroy.html

This will run terraform plan in destroy mode, showing you the proposed destroy changes without executing them.

======

Question 14
Fill in the blank when using multiple providers:

provider "aws" {
  ______= "west"
  region = "us-west-2"
}


resource "aws_instance" "my_server" {
  provider = aws.west

  # ...
}
target

name

alternate

alias*

You can optionally define multiple configurations for the same provider, and select which one to use on a per-resource or per-module basis. The primary reason for this is to support multiple regions for a cloud platform; other examples include targeting multiple Docker hosts, multiple Consul hosts, etc.

https://www.terraform.io/docs/language/providers/configuration.html#alias-multiple-provider-configurations
======

Question 15
Which Collection Type is a collection of unique values that do not have any secondary identifiers or ordering?

map

map is a collection of values where each is identified by a string label.

list

List is a sequence of values identified by consecutive whole numbers starting with zero.

tuple

SELECTED
Tuple is not a collection type by a structural type

set

Set is a collection of unique values that do not have any secondary identifiers or ordering.

EXPLANATION
https://www.terraform.io/docs/language/expressions/type-constraints.html#collection-types
==============

Question 16
Terraform uses a dependency graph in order to reconsile resource dependencies for the generating plans?

False

True *

Terraform builds a dependency graph from the Terraform configurations, and walks this graph to generate plans, refresh state, and more.

https://www.terraform.io/docs/internals/graph.html
==============

Question 17
What is the command you should use to upgrade modules and plugins a part of their respective installation steps?

terraform apply -upgrade

There is no such command

terraform resource -upgrade

There is no such command

terraform refresh -upgrade

There is no such command

terraform init -upgrade

SELECTED
-upgrade Opt to upgrade modules and plugins as part of their respective installation steps. See the sections below for more details.

https://www.terraform.io/docs/cli/commands/init.html#general-options

=======

Question 18
A DevOps Engineer wants to divide their terraform main.tf into multiple files based on providers. They create two configuration files and specify the required provider in each file.

aws.tf

terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "3.58.0"
    }
  }
}
azure.tf

terraform {
  required_providers {
    azurerm = {
      source = "hashicorp/azurerm"
      version = "2.76.0"
    }
  }
}
Will this work?

True


False *

There can be only one terraform settings block across all your .tf files in your module. If you create two terraform settings block it will result in an error that its already defined.

its common to place your providers in its own file called providers.tf

==========

Question 19
Which built-in string function removes newline characters at the end of a string?

trimprefix

trimprefix removes the specified prefix from the start of the given string. If the string does not start with the prefix, the string is returned unchanged.

> trimprefix("helloworld", "hello")
world
trim

trim removes the specified characters from the start and end of the given string.

> trim("?!hello?!", "!?")
hello
trimsufix

trimsuffix removes the specified suffix from the end of the given string.

> trimsuffix("helloworld", "world")
hello
chomp

SELECTED
chomp removes newline characters at the end of a string.

> chomp("hello\n")
hello
> chomp("hello\r\n")
hello
> chomp("hello\n\n")
hello

=============

Question 20
It is secure to store sensitive data on your Terraform State in Terraform Cloud?

No, Terraform Cloud does not support encryption mechanisms to the Terraform State

This is not true because Terraform Cloud always encrypts the state at rest and protects it with TLS in transit.

Yes, but you are required to use Hashicorp Vault

Hashicorp Vault is a separate tool that encrypts your data and allows you to retrieve it in your Terraform code, but it does not encrypt the Terraform state.

Yes, Terraform Cloud encrypts the state at rest and protects it with TLS in transit

SELECTED
Terraform Cloud always encrypts state at rest and protects it with TLS in transit. Terraform Cloud also knows the identity of the user requesting state and maintains a history of state changes. This can be used to control access and track activity. Terraform Enterprise also supports detailed audit logging.

https://www.terraform.io/docs/language/state/sensitive-data.html#recommendations
==========

Question 21
You created a VM instance on AWS cloud provider with the terraform configuration.

You log in AWS console and removed the instance.

What will happen when you use the terraform apply command?

Nothing will change

The terraform configuration will create the VM instance

It destroys the instance and creates it again

There is nothing to destroy as you removed the instance using the AWS console.

Two instances will be created

There is only one instance in the configuration

It will create the instance again

SELECTED
Terraform will detect that there is no instance and will match with the desired state and create the instance again.

=========

Question 22
Which terraform command can be used to get detailed information for a single resource?

terraform resource list 'aws_instance.server'

there is no such command called resource for terraform

terraform state list 'aws_instance.server'

https://www.terraform.io/docs/cli/commands/state/list.html#example-filtering-by-resource

You can filter resources by passing an address to list, but its not detailed and in returns multiple records

$ terraform state list aws_instance.server
aws_instance.server[0]
aws_instance.server[1]
terraform resource show 'aws_instance.server'

there is no such command called resource for terraform

terraform state show 'aws_instance.server'

SELECTED
https://www.terraform.io/docs/cli/commands/state/show.html

# packet_device.worker:
resource "packet_device" "worker" {
    billing_cycle = "hourly"
    created       = "2015-12-17T00:06:56Z"
    facility      = "ewr1"
    hostname      = "prod-xyz01"
    id            = "6015bg2b-b8c4-4925-aad2-f0671d5d3b13"
    locked        = false
}
==========

A cloud developer created a server using terraform and wants to upgrade the server size from 1GB to 2GB. The developer makes the changes to the configuration and runs terraform plan before going for a break.

During the break, one of the developer's colleagues manually changes the size to 2GB on the cloud provider console.

What will occur when the developer returns from the break and runs terraform apply?

Terraform will create another server with the size of 2GB

Terraform will not create a new server because terraform will recognize that there is already one server present.

Terraform will destroy and create a new server with 2GB

The server size is already 2GB, therefore terraform will recognize there is no change needed and will not destroy and create a new server.

Terraform will attempt to change the server size from 1GB to 2GB.

The desired state of a server size of 2GB has already been met and terraform will not create any changes.

Terraform will not perform any changes as the server size is already 2GB

Since the server size is already 2GB, Terraform will recognize that the server has reached the desired state and will not make any changes. *

Terraform can compare the desired state, defined in your configuration, with the actual state of your existing resources. This comparison allows Terraform to detect which resources need to be created, modified, or destroyed.

Terraform is Idempotent.

======
Question 24
If the running version of Terraform doesn't match the constraints specified, Terraform will produce an error and exit without taking any further actions.

False


True*

This is true, The required_version setting accepts a version constraint string, which specifies which versions of Terraform can be used with your configuration.

If the running version of Terraform doesn't match the constraints specified, Terraform will produce an error and exit without taking any further actions.

https://www.terraform.io/docs/language/settings/index.html#specifying-a-required-terraform-version
=========

Question 26
Terraform Enterprise offers the following benefits over Open-source Terraform:

Run Terraform Enterprise on-premise private cloud

SELECTED
A company may be using a private cloud for their own-premise environment like OpenStack and want to have the Terraform platform on-premise as well.

Meet your compliance requirements running on your infrastructure

SELECTED
The primary reason an enterprise wants to run a platform on-premise or on its own cloud infrastructure is to meet a regulatory compliance program.

No need to maintain the underlying infrastructure.

Terraform Enterprise comes with the trade-off (downside) that you have to manage your infrastructure yourself, but what you get is full control and visibility of that infrastructure.

Air-gapped environments

SELECTED
Terraform Enterprise can be run in Air-gapped environments.

Air gapped environments are networks that are isolated from other networks, usually both physically and logically. That means no internet. No outside connectivity.

https://www.hashicorp.com/blog/deploying-terraform-enterprise-in-airgapped-environments

=========

Question 27
You defined variables.tf in the root folder:

variable "vpc_name" {
  description = "Name of VPC"
  type        = string
  default     = "example-vpc"
}
The configuration is shown below:

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "2.21.0"

  name = __________
}
How can you access/reference the variable in the configuration for the name argument?

vpc_name

vpc_name.var

variablevpcname

var.vpc_name

SELECTED
var. is the value of the input variable of the given name.

If the variable has a type constraint (type argument) as part of its declaration, Terraform will automatically convert the caller's given value to conform to the type constraint.

https://www.terraform.io/docs/language/expressions/references.html#input-variables

https://www.terraform.io/docs/language/values/variables.html#suppressing-values-in-cli-output
============

Question 28
A terraform admin is configuring their terraform files and wants to list all the resources.

What command should they use?

terraform workspace list

The terraform workspace list command is used to list all existing workspaces.

terraform state show

The command will show the attributes of a single resource in the state file that matches the given address.

terraform workspace show

The terraform workspace show command is used to output the current workspace.

terraform state list

SELECTED
The command will list all resources in the state file matching the given addresses (if any). If no addresses are given, all resources are listed.

Usage: terraform state list [options] [address...]

https://www.terraform.io/docs/cli/commands/state/list.html

==========

Question 29
Terraform is OSS, meaning that is it free to use and all of its code is available on Github

False

True*

SELECTED
OSS stands for open-source software

https://github.com/hashicorp/terraform

=========

Question 30
Terraform refresh and terraform apply -refresh-only does not modify the existing infrastructure.

False

True*

SELECTED
This won't modify your real remote objects, but it will modify the Terraform state.

The terraform refresh command is used to reconcile the state Terraform is aware of with the real-world infrastructure with its state file.

This can be used to identify and update any drift from the last-known state. This does not change the infrastructure, but it changes the state file.

https://www.terraform.io/docs/cli/commands/refresh.html
=========

Question 31
What is the least disruptive way to make a terraform-managed resource be destroyed and recreated on the next apply?

Delete the state file and recreate a new one

Does not achieve the goal.

Go into the configuration script and manually delete the resource it


Not recommended, does not follow best practice, and most disruptive way.

Use the terraform state mv*

Terraform will look in the current state for a resource instance, resource, or module that matches the given address, and if successful it will move the remote objects currently associated with the source to be tracked instead by the destination.

Use the command: terraform apply -replace= on the specified resource

terraform taint will also be included on the test which is the deprecated version.

terraform apply -replace= Creating a plan with the "replace" option is superior to using terraform taint because it will allow you to see the full effect of that change before you take any externally-visible action.

The terraform taint command informs Terraform that a particular object has become degraded or damaged. Terraform represents this by marking the object as "tainted" in the Terraform state, in which case Terraform will propose to replace it in the next plan you create.

Command: taint

Use the terraform resource rm

There is no such command. only Command: state rm

terraform state rm [options] ADDRESS

e.g. terraform state rm 'packet_device.worker'
============

Question 32
A DevOps engineer is writing a configuration script that will provision a Virtual Machine (VM) on AWS via a build server. After the resource is provisioned they want to run an arbitrary script on the build server that will get the current private_ip address of the remote VM.

Which provisioner command should they use?

provisioner

This is not a type of provisioner, but the provisioned block

remote-exec

SELECTED
Remote exec will run commands on the target VM, not on the environment executing the terraform commands.

file

File is a type of provisioner when you want to copy files locally to the remote after provisioning.

local-exec

The local-exec provisioner invokes a local executable after a resource is created. This invokes a process on the machine running Terraform, not on the resource. See the remote-exec provisioner to run commands on the resource.

resource "aws_instance" "web" {
  # ...

  provisioner "local-exec" {
    command = "echo ${self.private_ip} >> private_ips.txt"
  }
}
https://www.terraform.io/docs/language/resources/provisioners/local-exec.html


==========

Question 33
What collection type is a key and value pair?

tuple

tuple(...): a sequence of elements identified by consecutive whole numbers starting with zero, where each element has its own type.

list

list(...): a sequence of values identified by consecutive whole numbers starting with zero.

set

set(...): a collection of unique values that do not have any secondary identifiers or ordering.

map

SELECTED
Maps can be made with braces ({}) and colons (:) or equals signs (=): { "foo": "bar", "bar": "baz" } OR { foo = "bar", bar = "baz" }. Quotes may be omitted on keys, unless the key starts with a number, in which case quotes are required. Commas are required between key/value pairs for single line maps. A newline between key/value pairs is sufficient in multi-line maps.

https://www.terraform.io/docs/language/expressions/type-constraints.html#collection-types

========

Question 34
What is the name of the resource group created in the following code?

resource "azurerm_resource_group" "dev" {
name = "test"
location = "east-us-1"
}
azurerm_resource_group
This is the resource type

dev

SELECTED
This is the local name ("dev").

resource

This is the block

test

The name of the resource group created would be "test"

A resource block declares a resource of a given type ("azurermresourcegroup") with a given local name ("dev").

The name argument provides the resource with the name.

https://www.terraform.io/docs/language/resources/syntax.html#resource-syntax

EXPLANATION
https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/resource_group#name

==========

Question 35
When you create a new workspace it will by default switch to that workspace?

False

True

SELECTED
$ terraform workspace new example
Created and switched to workspace "example"!

You're now on a new, empty workspace. Workspaces isolate their state,
so if you run "terraform plan" Terraform will not see any existing state
for this configuration.

==========

Question 36
Which configuration block is where the Terraform-specific settings and behaviours are declared?

resource

Terraform-specific settings and behaviours are not declared in the resource block

Resources are the most important element in the Terraform language. Each resource block describes one or more infrastructure objects, such as virtual networks, compute instances, or higher-level components such as DNS records.

https://www.terraform.io/docs/language/resources/syntax.html

provider

Terraform-specific settings and behaviours are not declared in the provider block

Provider configurations belong in the root module of a Terraform configuration.

https://www.terraform.io/docs/language/providers/configuration.html

data

Terraform-specific settings and behaviours are not declared in the data block

Data sources allow Terraform use information defined outside of Terraform, defined by another separate Terraform configuration, or modified by functions.

https://www.terraform.io/docs/language/data-sources/index.html

terraform

SELECTED
The special terraform configuration block type is used to configure some behaviors of Terraform itself, such as requiring a minimum Terraform version to apply your configuration.

For example:

terraform { required_version = "=>0.13.0" )
===========

Question 37
A developer is using the module "aws_instance".

The developer wants to use that server's IP address in the DNS module.

What is the best way to accomplish this?

Set the IP address generated by the TF_VAR variables to this value.

Terraform does not allow us to set the TF_VAR directly using configuration

using environment variables, export the IP address from the aws_instance module.

Terraform configuration does not allow for direct export of environment values.

Create a variable.tfvars file and set parameters in the file for output

This will not accomplish the task.

configure the output value in the aws_instance and access it in the DNS module

SELECTED
Output values are like the return values of a Terraform module, and have several uses:

A child module can use outputs to expose a subset of its resource attributes to a parent module.
A root module can use outputs to print certain values in the CLI output after running terraform apply.
When using remote state, root module outputs can be accessed by other configurations via a terraformremotestate data source.
https://www.terraform.io/docs/language/values/outputs.html

=========

Question 38
Which of the following are the benefits of the remote state when using remote backends? (Choose 2)

Remote state separate workspaces function like completely separate working directories.

A workspace contains everything Terraform needs to manage a given collection of infrastructure, and separate workspaces function like completely separate working directories.

Remote state is loaded only in memory when it is used.*

Terraform is now storing your state remotely in Terraform Cloud. Remote state storage makes collaboration easier and keeps state and secret information off your local disk. Remote state is loaded only in memory when it is used.

https://learn.hashicorp.com/tutorials/terraform/aws-remote?in=terraform/aws-get-started#apply-the-configuration

Remote state is an embedded policy-as-code framework integrated with the HashiCorp Enterprise products

Sentinel is an embedded policy-as-code framework integrated with the HashiCorp Enterprise products.

Remote state storage makes collaboration easier and keeps state and secret information off your local disk.*

SELECTED
Terraform is now storing your state remotely in Terraform Cloud. Remote state storage makes collaboration easier and keeps state and secret information off your local disk. Remote state is loaded only in memory when it is used.

https://learn.hashicorp.com/tutorials/terraform/aws-remote?in=terraform/aws-get-started#apply-the-configuration
========
Question 39
IaC requires the use of Git to function?

True

False *

SELECTED
Infrastructure as Code are development tools powered by API libraries. They do not reply on Git but a computing resource to execute the code.
==========

Question 40
What is the name of the terraform provider used?

terraform {
  required_providers {
    azurerm = {
      source = "hashicorp/azurerm"
      version = "=2.71.0"
    }
  }
}

resource "azurerm_resource_group" "dev" {
  name     = "test"
  location = "West US"
}
dev

test

azurerm_resource_group

azurerm

SELECTED
You will need to describe how Terraform finds and fetches providers, so you'll need to be familiar with some of the major terraform providers such as azure, amazon, google.

# Create a resource group
resource "azurerm_resource_group" "dev" {
  name     = "test"
  location = "West US"
}
"azurerm_resource_group" - A resource block declares a resource of a given type ("azurerm_resource_group")
"dev" - local name (can be used for referencing id, e.g. azurerm_resource_group.dev.id)
"test" - the name of the resource
provider "azurerm"
Terraform Provider for Azure (Resource Manager)

azurerm

=======

Question 41
What is the equivalent to the command terraform refresh?

terraform apply -refresh

There is no such flag called -refresh, there is only refresh-only

terraform apply -refresh-only

SELECTED
This alternative command will present an interactive prompt for you to confirm the detected changes.

terraform plan -refresh-only

terraform apply -refresh-only -auto-approve

Running terraform refresh is the equivalent of using the -refresh-only flag and having it auto-approve.

The terraform refresh command was deemed dangerous since it explicitly skipped the review step and so it was deprecated

https://www.terraform.io/docs/cli/commands/refresh.html#usage

EXPLANATION
terraform refresh is deprecated but its important to know the history of this command and its modern equivlent

==========

Question 42
What are the benefits of using modules in terraform? (Choose 3)

Helps interact with cloud providers, SaaS providers, and other APIs.


This is not correct. Terraform relies on plugins called "providers" to interact with cloud providers, SaaS providers, and other APIs.

https://www.terraform.io/docs/language/providers/index.html

Can help re-use configuration*

SELECTED
Using modules can save time and reduce costly errors by re-using configuration written either by yourself, other members of your team, or other Terraform practitioners who have published modules for you to use.

Helps to encapsulate configuration*

Another benefit of using modules is to encapsulate configuration into distinct logical components.

Helps to organize configuration*

SELECTED
Modules make it easier to navigate, understand, and update your configuration by keeping related parts of your configuration together.

https://learn.hashicorp.com/tutorials/terraform/module#what-are-modules-for

Helps to the embed the policy-as-code framework

This is not a specific feature of terraform modules. This is what Sentinel does.

https://www.terraform.io/docs/cloud/sentinel/index.html

=========

Question 43
What best describes an Enhanced Backend?

Cannot store state, but can perform terraform operations The state is stored on a third-party backend

There is no such combination of this configuration

Can store only state and does not perform operations. Relies on a third-party backend to store state

This is a standard backend

There is no such thing as Enhanced Backend. There is only remote state

This is not true.

Can store both state and perform terraform operations Can be either local or remote

SELECTED
This is correct. It can be either local or remote. Remote being Terraform Cloud.

EXPLANATION
Terraform's backends are divided into two main types, according to how they handle state and operations:

Enhanced backends can both store state and perform operations. There are only two enhanced backends: local and remote.
Standard backends only store state, and rely on the local backend for performing operations.
https://www.terraform.io/docs/language/settings/backends/index.html#backend-types
========

Question 44
A cloud developer has created two servers using the following block for the terraform configuration.

resource "aws_instance" "web_server" {
ami = "ami-0747bdcabd34c712a"
instance_type = "t2.micro"
count = 2
}
The developer wants to destroy the second server without being prompted with a confirmation.

How can this be completed?

terraform resource -target=aws_instance.web_server[1]

There is no such command as terraform resource

terraform destroy -target=aws_instance.web_server[2]

This would target the third server, which does not exist, and there is no -auto-approve.

terraform resource -target=aws_instance.web_server[1] -auto-approve

There is no such command as terraform resource

terraform destroy -target=aws_instance.web_server[1] -auto-approve

SELECTED
Using the -target=awsinstance.webserver[1] -auto-approve specifies the resource being deleted, and the index [1] means it's the second server as the index[0] is the first server and [1] is the second server.

Usage: terraform destroy [options] [dir]

The -auto-approve allows the system to approve automatically without prompting the user to confirm the destroy

https://www.terraform.io/docs/cli/commands/destroy.html

https://www.terraform.io/docs/cli/commands/apply.html#auto-approve

http://man.hubwiz.com/docset/Terraform.docset/Contents/Resources/Documents/docs/commands/destroy.html

http://man.hubwiz.com/docset/Terraform.docset/Contents/Resources/Documents/docs/commands/plan.html#resource-targeting

===========

Question 45
IaC allows DevOps Engineer teams to quickly stand up infrastructure in a repeatable way?

False

True*

SELECTED
============

Question 46
Terraform allows you to define and manage multiple provider resources in a single terraform configuration file.

False

True*

SELECTED
Terraform is cloud-agnostic and allows a single configuration to be used to manage multiple providers, and to even handle cross-cloud dependencies. This simplifies management and orchestration, helping operators build large-scale multi-cloud infrastructures.

https://www.terraform.io/intro/use-cases.html#multi-cloud-deployment

https://www.terraform.io/docs/language/providers/configuration.html#alias-multiple-provider-configurations
=========

Question 47
Which of the following configuration blocks provide the correct syntax for referencing a registry module?

module "vault" {
  resource = "hashicorp/vault/aws"
  version = "0.1.2"
}
module "vault" {
  registry = "hashicorp/vault/aws"
  version = "0.1.2"
}
None of the options

module "vault" {
  source = "hashicorp/vault/aws"
  version = "0.1.2"
}
SELECTED
The syntax for referencing a registry module '//' using the source argument

The source argument in a module block tells Terraform where to find the source code for the desired child module.

The namespace is hashicorp
The name of the module is "vault"
The provider is aws
https://www.terraform.io/docs/language/modules/sources.html#terraform-registry
===========

Question 48
What type of dependency is present in the following code?

resource "aws_s3_bucket" "example" {
  bucket = "bucket_one"
  acl    = "private"
}

resource "aws_instance" "example" {
  ami           = "ami-0747bdcabd34c712a"
  instance_type = "t2.micro"

  depends_on = [aws_s3_bucket.example]
}
expressive

There is no such thing

implicit

Terraform uses this dependency information to determine the correct order in which to create the different resources.

no dependencies are used

This is incorrect as the example shown is explicit

explicit*

In the code provided,

An application that will run on our EC2 instance expects to use a specific Amazon S3 bucket, but that dependency is configured inside the application code and thus not visible to Terraform. In that case, we can use depends_on to explicitly declare the dependency

Sometimes there are dependencies between resources that are not visible to Terraform, however. The depends_on argument is accepted by any resource or module block and accepts a list of resources to create explicit dependencies for.

https://learn.hashicorp.com/tutorials/terraform/dependencies#manage-explicit-dependencies

=======

Question 49
What argument must be included in the module block?

providers

A map whose keys are provider configuration names that are expected by the child module and whose values are corresponding provider names in the calling module. This allows provider configurations to be passed explicitly to child modules.

https://www.terraform.io/docs/language/modules/syntax.html#providers

version

The version argument accepts a version constraint string. Terraform will use the newest installed version of the module that meets the constraint; if no acceptable versions are installed, it will download the newest version that meets the constraint.

https://www.terraform.io/docs/language/modules/syntax.html#version

depends_on

depends_on - Creates explicit dependencies between the entire module and the listed targets.

https://www.terraform.io/docs/language/modules/syntax.html#meta-arguments

source

SELECTED
All modules require a source argument, which is a meta-argument defined by Terraform. Its value is either the path to a local directory containing the module's configuration files, or a remote module source that Terraform should download and use.

https://www.terraform.io/docs/language/modules/syntax.html#source
========

Question 50
When importing external cloud resources via the terraform import command you can supply a placeholder resource and terraform will automatically fill it all of its attributes on the import action

True


False*

you can leave the body of the resource block blank for now and return to fill it in once the instance is imported.

resource "aws_instance" "example" {
  # ...instance configuration...
}
https://www.terraform.io/docs/cli/import/usage.html

Terraform does not automatically populate or modifying your configuration script.
=========

Question 51
What prevents multiple developers from causing concurrent runs of Terraform against the same state?

Modules

A module is a container for multiple resources that are used together.

Version control

Terraform enables you to safely and predictably write, plan, and provision infrastructure as code. ... It codifies APIs into declarative configuration files that can be shared amongst team members, treated as code, edited, reviewed, and versioned.

Providers

A Terraform Provider represents an integration that is responsible for understanding API interactions with the underlying infrastructure

State locking

SELECTED
For fully-featured remote backends, Terraform can also use state locking to prevent concurrent runs of Terraform against the same state.

State locking prevents multiple developers from causing concurrent runs of Terraform against the same state because it locks the state file until the update is fully complete and can be unlocked for the next command.

Can be configured in your storage backend. E.g. Amazon DynamoDB is automatically used for state locking. Note: Not all storage backends support state locking.

State Locking

Locking and Teamwork
=======

Question 52
Terraform is cloud-agnostic, but can only provision resources for one provider per terraform execution operation eg. terraform apply

True


False*

You can specify multiple providers and provision multiple resources at the same time.

========
Question 53
IaC stands for _________as Code

Immutablity

Identity

Idempotent

Infrastructure

SELECTED
======

Question 54
The values for your variables were defined in a file named terraform.tfvars, which was saved in the same directory as your Terraform configuration.

Which of the following commands will use the values when creating an execution plan? (Choose 2)

terraform validate

SELECTED
This command does not use those values when creating an execution plan

terraform plan -var-file = terraform.tfvars*

-var-file=FILENAME - Sets values for potentially many input variables declared in the root module of the configuration, using definitions from a "tfvars" file. Use this option multiple times to include values from more than one file.

https://www.terraform.io/docs/cli/commands/plan.html#var-file-filename

terraform init -var-file = terraform.tfvars

This command does not use those values when creating an execution plan

terraform plan

SELECTED
The terraform plan command creates an execution plan. By default, creating a plan consists of:

Reading the current state of any already-existing remote objects to make sure that the Terraform state is up-to-date.
Comparing the current configuration to the prior state and noting any differences.
Proposing a set of change actions that should, if applied, make the remote objects match the configuration.
https://www.terraform.io/docs/cli/commands/plan.html

EXPLANATION
The values for your variables were defined in the file terraform.tfvars, which was saved in the same directory as your Terraform configuration.
========

Question 55
Which of the following are optional arguments for declaring an input variable?

sensitive

validation

description

All of the options

default *

EXPLANATION
default - A default value which then makes the variable optional.
type (required)- This argument specifies what value types are accepted for the variable.
description - This specifies the input variable's documentation.
validation - A block to define validation rules, usually in addition to type constraints. *sensitive - Limits Terraform UI output when the variable is used in configuration.
https://www.terraform.io/docs/language/values/variables.html#arguments

======

Question 56
local-exec only executes commands on the local developer machine that is running Terraform

Is this statement true?

True, it executes only on local machine eg. your development environment, but never on build servers or Terraform Cloud

False, it executes the command locally on the target remote object

False, it only executes on Terraform Cloud or a build server

False, it will always execute on any machine running Terraform*

https://www.terraform.io/docs/language/resources/provisioners/local-exec.html

=======

Question 57
Which of the following commands can read the current settings from all managed remote objects and update the Terraform state to match? (Choose 2)

terraform validate

Validate runs checks that verify whether a configuration is syntactically valid and internally consistent, regardless of any provided variables or existing state

terraform plan

Reading the current state of any already-existing remote objects to make sure that the Terraform state is up-to-date.

Comparing the current configuration to the prior state and noting any differences.

Proposing a set of change actions that should, if applied, make the remote objects match the configuration.

https://www.terraform.io/docs/cli/commands/plan.html

terraform apply

SELECTED
Terraform automatically performs the same refreshing actions as a part of creating a plan in both the terraform plan and terraform apply commands.

https://www.terraform.io/docs/cli/commands/refresh.html

https://www.terraform.io/docs/cli/commands/apply.html

terraform refresh

SELECTED
The terraform refresh command reads the current settings from all managed remote objects and updates the Terraform state to match.

This command is effectively an alias for the following command:

terraform apply -refresh-only -auto-approve

https://www.terraform.io/docs/cli/commands/refresh.html

terraform fmt

The terraform fmt command is used to rewrite Terraform configuration files to a canonical format and style.
======




























































































